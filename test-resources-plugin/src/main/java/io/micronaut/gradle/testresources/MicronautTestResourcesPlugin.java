/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.micronaut.gradle.testresources;

import io.micronaut.gradle.MicronautExtension;
import io.micronaut.testresources.buildtools.MavenDependency;
import io.micronaut.testresources.buildtools.ServerUtils;
import io.micronaut.testresources.buildtools.TestResourcesClasspath;
import io.micronaut.testresources.buildtools.VersionInfo;
import org.gradle.api.GradleException;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.Dependency;
import org.gradle.api.artifacts.ModuleDependency;
import org.gradle.api.artifacts.dsl.DependencyHandler;
import org.gradle.api.file.Directory;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.file.RegularFile;
import org.gradle.api.internal.project.ProjectInternal;
import org.gradle.api.provider.Provider;
import org.gradle.api.provider.ProviderFactory;
import org.gradle.api.tasks.JavaExec;
import org.gradle.api.tasks.TaskContainer;
import org.gradle.api.tasks.TaskProvider;
import org.gradle.api.tasks.testing.Test;
import org.gradle.internal.event.ListenerManager;
import org.gradle.internal.service.ServiceRegistry;
import org.gradle.internal.session.BuildSessionLifecycleListener;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * This plugin integrates with Micronaut Test Resources.
 * It handles the lifecycle of the test resources server
 * and provides configuration so that the user can precisely
 * tweak the behavior of the test resources server.
 */
public class MicronautTestResourcesPlugin implements Plugin<Project> {
    public static final String START_TEST_RESOURCES_SERVICE = "startTestResourcesService";
    public static final String STOP_TEST_RESOURCES_SERVICE = "stopTestResourcesService";
    public static final String GROUP = "Micronaut Test Resources";

    private static final int DEFAULT_CLIENT_TIMEOUT_SECONDS = 60;

    public void apply(Project project) {
        project.getPluginManager().withPlugin("io.micronaut.component", unused -> configurePlugin(project));
    }

    private void configurePlugin(Project project) {
        Configuration server = createTestResourcesServerConfiguration(project);
        Provider<Integer> explicitPort = project.getProviders().systemProperty("micronaut.test-resources.server.port").map(Integer::parseInt);
        TestResourcesConfiguration config = createTestResourcesConfiguration(project, explicitPort);
        DependencyHandler dependencies = project.getDependencies();
        server.getDependencies().addAllLater(buildTestResourcesDependencyList(project, dependencies, config));
        String accessToken = UUID.randomUUID().toString();
        Provider<String> accessTokenProvider = project.getProviders().provider(() -> accessToken);
        Provider<Directory> settingsDirectory = config.getSharedServer().flatMap(shared -> {
            DirectoryProperty directoryProperty = project.getObjects().directoryProperty();
            if (Boolean.TRUE.equals(shared)) {
                directoryProperty.set(ServerUtils.getDefaultSharedSettingsPath().toFile());
            }
            return directoryProperty;
        }).orElse(project.getLayout().getBuildDirectory().dir("test-resources-settings"));
        Provider<RegularFile> portFile = project.getLayout().getBuildDirectory().file("test-resources-port.txt");
        Path stopAtEndFile;
        try {
            File asFile = project.getLayout().getBuildDirectory().file("test-resources/" + UUID.randomUUID()).get().getAsFile();
            if (asFile.getParentFile().isDirectory() || asFile.getParentFile().mkdirs()) {
                asFile.deleteOnExit();
                stopAtEndFile = asFile.toPath();
                Files.deleteIfExists(stopAtEndFile);
            } else {
                throw new IOException("Could not create directory for test resources stop file");
            }
        } catch (IOException e) {
            throw new GradleException("Unable to create temp file", e);
        }
        TaskContainer tasks = project.getTasks();
        Provider<Boolean> isStandalone = config.getSharedServer().zip(project.getProviders().provider(() -> {
            boolean singleTask = project.getGradle().getStartParameter().getTaskNames().size() == 1;
            boolean onlyStartTask = project.getGradle().getTaskGraph()
                    .getAllTasks()
                    .stream()
                    .allMatch(task -> task.getProject().equals(project) && StartTestResourcesService.class.isAssignableFrom(task.getClass()));
            return singleTask && onlyStartTask;
        }), (shared, singleTask) -> shared || singleTask);
        TaskProvider<StartTestResourcesService> startTestResourcesService = createStartServiceTask(server, config, settingsDirectory, accessTokenProvider, tasks, portFile, stopAtEndFile, isStandalone);
        TaskProvider<StopTestResourcesService> stopTestResourcesService = createStopServiceTask(settingsDirectory, tasks);
        project.afterEvaluate(p -> p.getConfigurations().all(conf -> configureDependencies(project, config, dependencies, startTestResourcesService, conf)));

        tasks.withType(Test.class).configureEach(t -> t.dependsOn(startTestResourcesService));
        tasks.withType(JavaExec.class).configureEach(t -> t.dependsOn(startTestResourcesService));

        configureServiceReset((ProjectInternal) project, settingsDirectory, stopAtEndFile);
    }

    private TaskProvider<StopTestResourcesService> createStopServiceTask(Provider<Directory> settingsDirectory, TaskContainer tasks) {
        return tasks.register(STOP_TEST_RESOURCES_SERVICE, StopTestResourcesService.class, task -> task.getSettingsDirectory().convention(settingsDirectory));
    }


    private void configureDependencies(Project project, TestResourcesConfiguration config, DependencyHandler dependencies, TaskProvider<StartTestResourcesService> writeTestProperties, Configuration conf) {
        String name = conf.getName();
        if ("developmentOnly".equals(name) || "testRuntimeOnly".equals(name)) {
            // Would be cleaner to use `config.getEnabled().zip(...)` but for some
            // reason it fails
            conf.getDependencies().addAllLater(config.getVersion().map(v -> {
                if (Boolean.TRUE.equals(config.getEnabled().get())) {
                    return Collections.singleton(dependencies.create("io.micronaut.testresources:micronaut-test-resources-client:" + v));
                }
                return Collections.emptyList();
            }));
            conf.getDependencies().addAllLater(config.getEnabled().map(enabled -> {
                if (Boolean.TRUE.equals(enabled)) {
                    return Collections.singleton(dependencies.create(project.files(writeTestProperties)));
                }
                return Collections.emptyList();
            }));
        }
    }

    private TaskProvider<StartTestResourcesService> createStartServiceTask(Configuration server,
                                                                           TestResourcesConfiguration config,
                                                                           Provider<Directory> settingsDirectory,
                                                                           Provider<String> accessToken,
                                                                           TaskContainer tasks,
                                                                           Provider<RegularFile> portFile,
                                                                           Path stopFile,
                                                                           Provider<Boolean> isStandalone) {
        return tasks.register(START_TEST_RESOURCES_SERVICE, StartTestResourcesService.class, task -> {
            task.setOnlyIf(t -> config.getEnabled().get());
            task.getPortFile().convention(portFile);
            task.getSettingsDirectory().convention(settingsDirectory);
            task.getAccessToken().convention(accessToken);
            task.getExplicitPort().convention(config.getExplicitPort());
            task.getClientTimeout().convention(config.getClientTimeout());
            task.getClasspath().from(server);
            task.getForeground().convention(false);
            task.getStopFile().set(stopFile.toFile());
            task.getStandalone().set(isStandalone);
        });
    }

    private TestResourcesConfiguration createTestResourcesConfiguration(Project project, Provider<Integer> explicitPort) {
        MicronautExtension micronautExtension = project.getExtensions().getByType(MicronautExtension.class);
        TestResourcesConfiguration testResources = micronautExtension.getExtensions().create("testResources", TestResourcesConfiguration.class);
        ProviderFactory providers = project.getProviders();
        testResources.getEnabled().convention(
                micronautExtension.getVersion()
                        .orElse(providers.gradleProperty("micronautVersion"))
                        .map(MicronautTestResourcesPlugin::isAtLeastMicronaut3dot5)
        );
        testResources.getVersion().convention(VersionInfo.getVersion());
        testResources.getExplicitPort().convention(explicitPort);
        testResources.getInferClasspath().convention(true);
        testResources.getClientTimeout().convention(DEFAULT_CLIENT_TIMEOUT_SECONDS);
        testResources.getSharedServer().convention(
                providers.gradleProperty("shared.test.resources")
                        .orElse(providers.systemProperty("shared.test.resources"))
                        .orElse(providers.environmentVariable("SHARED_TEST_RESOURCES"))
                        .orElse("false")
                        .map(str -> {
                            if (str.isEmpty()) {
                                return true;
                            }
                            return Boolean.parseBoolean(str);
                        })
        );
        return testResources;
    }

    private static boolean isAtLeastMicronaut3dot5(String v) {
        String[] parts = v.split("\\.");
        if (parts.length >= 2) {
            int major = Integer.parseInt(parts[0]);
            int minor = Integer.parseInt(parts[1]);
            if (major > 3 || (major == 3 && minor >= 5)) {
                return true;
            }
            return false;
        }
        return false;
    }

    private Provider<List<Dependency>> buildTestResourcesDependencyList(Project project, DependencyHandler dependencies, TestResourcesConfiguration config) {
        return config.getEnabled().zip(config.getInferClasspath(), (enabled, infer) -> {
            if (Boolean.FALSE.equals(enabled)) {
                return Collections.<Dependency>emptyList();
            }
            List<MavenDependency> mavenDependencies = Collections.emptyList();
            if (Boolean.TRUE.equals(infer)) {
                mavenDependencies = project.getConfigurations().getByName("runtimeClasspath")
                        .getAllDependencies()
                        .stream()
                        .filter(ModuleDependency.class::isInstance)
                        .map(ModuleDependency.class::cast)
                        .map(d -> new MavenDependency(d.getGroup(), d.getName(), d.getVersion()))
                        .collect(Collectors.toList());
            }
            String testResourcesVersion = config.getVersion().get();
            return Stream.concat(
                            TestResourcesClasspath.inferTestResourcesClasspath(mavenDependencies, testResourcesVersion)
                                    .stream()
                                    .map(Object::toString),
                            config.getAdditionalModules().getOrElse(Collections.emptyList())
                                    .stream()
                                    .map(m -> "io.micronaut.testresources:micronaut-test-resources-" + m + ":" + testResourcesVersion))
                    .map(dependencies::create)
                    .collect(Collectors.toList());
        }).orElse(Collections.emptyList());
    }

    private void configureServiceReset(ProjectInternal project,
                                       Provider<Directory> settingsDirectory,
                                       Path shouldStopFile) {
        ServiceRegistry services = project.getServices();
        ListenerManager listenerManager = services.get(ListenerManager.class);
        Field parentField;
        try {
            parentField = listenerManager.getClass().getDeclaredField("parent");

            parentField.setAccessible(true);
            listenerManager = (ListenerManager) parentField.get(parentField.get(listenerManager));
            listenerManager.addListener(new BuildSessionLifecycleListener() {
                @Override
                public void beforeComplete() {
                    try {
                        if (Files.exists(shouldStopFile)) {
                            project.getLogger().debug("Stop file contains " + Files.readAllLines(shouldStopFile));
                            if (Boolean.parseBoolean(Files.readAllLines(shouldStopFile).get(0))) {
                                ServerUtils.stopServer(settingsDirectory.get().getAsFile().toPath());
                            }
                        }
                    } catch (IOException e) {
                        project.getLogger().debug("Test resources server is already stopped", e);
                    }
                }
            });
        } catch (NoSuchFieldException | IllegalAccessException e) {
            throw new GradleException(e.getMessage(), e);
        }
    }

    private static Configuration createTestResourcesServerConfiguration(Project project) {
        return project.getConfigurations().create("testresources", conf -> {
            conf.setDescription("Dependencies for the Micronaut test resources service");
            conf.setCanBeConsumed(false);
            conf.setCanBeResolved(true);
        });
    }

}
