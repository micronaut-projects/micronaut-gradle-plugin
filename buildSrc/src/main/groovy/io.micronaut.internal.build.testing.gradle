import groovy.transform.CompileStatic

import java.util.regex.Pattern

plugins {
    id 'java'
    id 'pl.droidsonroids.jacoco.testkit'
    id 'com.adarshr.test-logger'
}

dependencies {
    testImplementation libs.groovy.core
    testImplementation libs.spock.core
    testImplementation libs.spock.junit4
}

// We are NOT using the `jvm-test-suite` plugin because
// it would generate different source sets for each test
// suite, which is not what we want: we simply need different
// test tasks, with different includes

tasks.withType(Test).configureEach {
    dependsOn("generateJacocoTestKitProperties")
    useJUnitPlatform()
    def graalvmHome = providers.environmentVariable('GRAALVM_HOME')
            .orElse(providers.environmentVariable("JAVA_HOME"))
            .getOrElse("")
    inputs.property("GRAALVM_HOME", graalvmHome)
    environment "GRAALVM_HOME", graalvmHome
    systemProperty "micronautVersion", libs.versions.micronaut.asProvider().get()
    predictiveSelection {
        enabled = micronautBuild.environment.isTestSelectionEnabled()
    }
}

def testPackages = providers.of(PackageListValueSource) { spec ->
    sourceSets.test.allSource.sourceDirectories.files.each { root ->
        if (root.exists()) {
            spec.parameters.sources.from(root)
        }
    }
}

testPackages.get().each { relativePath ->
    def pkg = relativePath.toString().split(Pattern.quote("" + File.separatorChar))
    def camelCase = pkg
            .collect { it.capitalize() }
            .join("")
            .uncapitalize()
    def testTask = tasks.register("${camelCase}Test", Test) {
        def testTask = tasks.named("test").get()
        testClassesDirs = testTask.testClassesDirs
        classpath = testTask.classpath
        include("${relativePath}/*")
    }
    tasks.named("check") {
        dependsOn(testTask)
    }
    tasks.named("test") {
        dependsOn(testTask)
    }
}

tasks.named("test") {
    exclude("**")
}

testlogger {
    theme 'standard-parallel'
    showFullStackTraces true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams false
    showFailedStandardStreams true
}

/**
 * This value source is used to generate the list of test packages.
 * We must implement our own value source, otherwise Gradle cannot
 * properly detect that the list of generated tasks must change whenever
 * a package is added or removed, when using the configuration cache.
 */
@CompileStatic
abstract class PackageListValueSource implements ValueSource<Set<String>, PackageListValueSource.Params> {
    interface Params extends ValueSourceParameters {
        @InputFiles
        ConfigurableFileCollection getSources()
    }

    @Override
    Set<String> obtain() {
        def fileset = new TreeSet<String>()
        parameters.sources.files.each { root ->
            if (root.exists()) {
                root.eachFileRecurse {
                    if (it.directory) {
                        if (it.listFiles().any { it.name.endsWith(".groovy") || it.name.endsWith(".java") }) {
                            def relativePath = root.toPath().relativize(it.toPath())
                            fileset.add(relativePath.toString())
                        }
                    }
                }
            }
        }
        fileset
    }
}
