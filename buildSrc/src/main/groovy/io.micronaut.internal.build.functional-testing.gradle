import io.micronaut.internal.build.test.FunctionalTestingExtension
plugins {
    id 'groovy'
    id 'io.micronaut.internal.build.testing'
}

pluginManager.apply(io.micronaut.build.MicronautQualityChecksParticipantPlugin)

configurations {
    pluginsUnderTest {
        canBeResolved = true
        canBeConsumed = false
    }
    jacocoAdditionalClasses {
        transitive = false
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.CLASSES))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
    }
    jacocoAdditionalSources {
        transitive = false
        attributes {
            attribute(VerificationType.VERIFICATION_TYPE_ATTRIBUTE, objects.named(VerificationType, VerificationType.MAIN_SOURCES))
        }
    }
}

extensions.create("functionalTesting", FunctionalTestingExtension)

def prepareRepository = tasks.register("prepareRepository", Sync) {
    from configurations.pluginsUnderTest
    into file("${buildDir}/aggregatedRepo")
}

tasks.withType(Test).configureEach { Test test ->
    def repoProvider = objects.newInstance(RepositoryProvider)
    repoProvider.repositoryDir.from(prepareRepository)
    repoProvider.version.set(version)
    test.jvmArgumentProviders.add(repoProvider)
    systemProperties.put("kotlinVersion", libs.versions.kotlin.get())
    systemProperties.put("kspVersion", libs.versions.ksp.get())
    systemProperties.put("shadowVersion", libs.versions.shadow.get())
}

tasks.withType(JacocoReport).configureEach {
    additionalClassDirs.from(configurations.jacocoAdditionalClasses)
    additionalSourceDirs.from(configurations.jacocoAdditionalSources)
}

abstract class RepositoryProvider implements CommandLineArgumentProvider {
    @Internal
    abstract ConfigurableFileCollection getRepositoryDir()

    @Classpath
    final FileTree getClasspath() {
        getRepositoryDir().getAsFileTree().matching {
            include("**/*.jar")
        }
    }

    @Input
    abstract Property<String> getVersion()

    @Override
    Iterable<String> asArguments() {
        String patchedVersion = version.get().replace('-SNAPSHOT', '-DUMMY')
        ["-Dinternal.plugin.repo=${repositoryDir.singleFile.toURI().toASCIIString()}", "-Dproject.version=${patchedVersion}"]
    }
}
