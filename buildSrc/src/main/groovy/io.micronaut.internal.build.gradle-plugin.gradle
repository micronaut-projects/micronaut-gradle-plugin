import io.micronaut.internal.build.plugin.MicronautPluginExtension

plugins {
    id "com.gradle.plugin-publish"
    id "java-gradle-plugin"
    id "maven-publish"
    id "groovy"
    id "com.adarshr.test-logger"
    id "io.micronaut.internal.build.testing"
}

pluginManager.apply(io.micronaut.build.MicronautQualityChecksParticipantPlugin)

repositories {
    mavenCentral()
    gradlePluginPortal()
//    maven { url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/") }
}

project.extensions.create("micronautPlugins", MicronautPluginExtension, gradlePlugin)

configurations {
    security {
        canBeResolved = false
        canBeConsumed = false
    }
    implementation.extendsFrom(security)
    repository {
        canBeConsumed = true
        canBeResolved = false
    }
}

def projectRepoPath = project.layout.buildDirectory.dir("repo")

def localPublicationsTasks = []

publishing {
    repositories {
        maven {
            name = "build"
            url = "${rootProject.layout.buildDirectory.dir("repo").get().asFile.toURI()}"
        }
        maven {
            name = "project"
            url = "${projectRepoPath.get().asFile.toURI()}"
        }
    }
    publications.all { pub ->
        if (!pub.name.startsWith('local')) {
            String pubName = "local${pub.name.capitalize()}"
            localPublicationsTasks << "publish${pubName.capitalize()}PublicationToProjectRepository".toString()
            publications.register(pubName, MavenPublication) {
                project.afterEvaluate {
                    def component = pub.component
                    from(component)
                    alias = true
                    groupId = pub.groupId
                    artifactId = pub.artifactId
                    version = project.version.replace('-SNAPSHOT', '-DUMMY')
                    if (component == null) {
                        String pName = project.name
                        String pGroup = project.group
                        String pVersion = project.version.toString().replace('-SNAPSHOT', '-DUMMY')
                        // it is a plugin marker
                        pom.withXml {
                            def dependenciesNode = asNode().appendNode('dependencies')
                            def dep = dependenciesNode.appendNode('dependency')
                            dep.appendNode('groupId', pGroup)
                            dep.appendNode('artifactId', pName)
                            dep.appendNode('version', pVersion)
                        }
                    } else {
                        pom.withXml {
                            asNode().dependencies.dependency.each { n ->
                                if (n.groupId[0].text() == 'io.micronaut.gradle') {
                                    if (n.version[0].text().endsWith('-SNAPSHOT')) {
                                        n.version[0].value = n.version[0].text().replace('-SNAPSHOT', '-DUMMY')
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


def cleanRepository = tasks.register("cleanRepository", Delete) {
    delete projectRepoPath
}

def publishPluginToProjectRepo = tasks.register("publishPluginToProjectRepo") {
    dependsOn(cleanRepository)
    dependsOn(localPublicationsTasks)
}

localPublicationsTasks.each { taskName ->
    tasks.named(taskName) {
        mustRunAfter(cleanRepository)
    }
}

configurations.repository.outgoing {
    artifact(projectRepoPath) {
        builtBy(publishPluginToProjectRepo)
    }
}

dependencies {
    constraints {
        security(libs.log4j2.core) {
            because("Log4j2 <2.15 is vulnerable to RCE (CVE-2021-44228)")
        }
    }
}

tasks.withType(Jar).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// There are many violations that we'll need to fix later
tasks.withType(Checkstyle).configureEach {
    enabled = false
}

tasks.withType(GenerateModuleMetadata).configureEach {
    if (it.name.contains('ForLocal')) {
        enabled = false
    }
}

gradlePlugin {
    website = "https://github.com/micronaut-projects/micronaut-gradle-plugin"
    vcsUrl = "https://github.com/micronaut-projects/micronaut-gradle-plugin.git"
}

tasks.withType(PublishToMavenRepository).configureEach {
    def predicate = provider {
        if (repository.name == 'sonatype' &&
                publication.name.startsWith('local')) {
            return false
        }
        return true
    }
    onlyIf("skip publication of local artifacts to Sonatype") {
        predicate.get()
    }
}
