import io.micronaut.internal.build.plugin.MicronautPluginExtension

plugins {
    id "com.gradle.plugin-publish"
    id "java-gradle-plugin"
    id "maven-publish"
    id "groovy"
    id "com.adarshr.test-logger"
    id "io.micronaut.internal.build.testing"
}

pluginManager.apply(io.micronaut.build.MicronautQualityChecksParticipantPlugin)

repositories {
    mavenCentral()
    gradlePluginPortal()
}

project.extensions.create("micronautPlugins", MicronautPluginExtension, pluginBundle, gradlePlugin)

configurations {
    security {
        canBeResolved = false
        canBeConsumed = false
    }
    implementation.extendsFrom(security)
    repository {
        canBeConsumed = true
        canBeResolved = false
    }
}

pluginBundle {
    website = 'https://micronaut.io/'
    vcsUrl = 'https://github.com/micronaut-projects/micronaut-gradle-plugins'
    description = 'Gradle Plugins for Micronaut'
    tags = ['micronaut']
}

publishing {
    repositories {
        maven {
            name = "build"
            url = "${rootProject.layout.buildDirectory.dir("repo").get().asFile.toURI()}"
        }
    }
}

configurations.repository.outgoing {
    artifact(rootProject.layout.buildDirectory.dir("repo")) {
        builtBy(tasks.named("publishAllPublicationsToBuildRepository"))
    }
}

dependencies {
    constraints {
        security(libs.log4j2.core) {
            because("Log4j2 <2.15 is vulnerable to RCE (CVE-2021-44228)")
        }
    }
}

// This is a quick and dirty workaround for
// publication tasks which are never up-to-date.
// The problem is that we rely on a local repository
// for functional testing, and that every invocation
// of a test would trigger a publication and therefore
// never be up-to-date.
tasks.configureEach {
    if (it.name.startsWith("generateMetadataFile")
            || it.name.startsWith("generatePomFile")
            || it.name.startsWith("publish")) {
        dependsOn(tasks.named('jar'))
        onlyIf {
            !rootProject.layout.buildDirectory.dir("repo").get().asFile.exists() || tasks.getByName("jar").didWork
        }
    }
}

// There are many violations that we'll need to fix later
tasks.withType(Checkstyle).configureEach {
    enabled = false
}
